let prelude =
      https://raw.githubusercontent.com/dhall-lang/dhall-to-cabal/1.3.2.0/dhall/prelude.dhall

let types =
      https://raw.githubusercontent.com/dhall-lang/dhall-to-cabal/1.3.2.0/dhall/types.dhall

in    prelude.defaults.Package
    ⫽ { name =
          "dhrun"
      , version =
          prelude.v "0.0.1"
      , author =
          "Valentin Reis"
      , build-type =
          Some (types.BuildType.Simple {=})
      , cabal-version =
          prelude.v "2.0"
      , category =
          "tools"
      , description =
          "reads process information from a dhall configuration and executes asynchronous processes."
      , executables =
          [ { executable =
                  λ(config : types.Config)
                →   prelude.defaults.Executable
                  ⫽ { main-is =
                        "Main.hs"
                    , build-depends =
                        [ { bounds = prelude.anyVersion, package = "base" }
                        , { bounds = prelude.anyVersion, package = "protolude" }
                        , { bounds = prelude.anyVersion, package = "directory" }
                        , { bounds =
                              prelude.anyVersion
                          , package =
                              "bytestring"
                          }
                        , { bounds =
                              prelude.anyVersion
                          , package =
                              "editor-open"
                          }
                        , { bounds = prelude.anyVersion, package = "dhrun-lib" }
                        , { bounds = prelude.anyVersion, package = "filepath" }
                        , { bounds =
                              prelude.anyVersion
                          , package =
                              "optparse-applicative"
                          }
                        , { bounds = prelude.anyVersion, package = "dhall" }
                        ]
                    , compiler-options =
                          prelude.defaults.CompilerOptions
                        ⫽ { GHC =
                              [ "-threaded"
                              , "-Wall"
                              , "-Wcompat"
                              , "-Wincomplete-uni-patterns"
                              , "-Wincomplete-record-updates"
                              , "-Wmissing-home-modules"
                              , "-Widentities"
                              , "-Wredundant-constraints"
                              , "-Wcpp-undef"
                              , "-fwarn-tabs"
                              , "-fwarn-unused-imports"
                              , "-fwarn-missing-signatures"
                              , "-fwarn-name-shadowing"
                              , "-fprint-potential-instances"
                              , "-Wmissing-export-lists"
                              , "-fwarn-unused-do-bind"
                              , "-fwarn-wrong-do-bind"
                              , "-fwarn-incomplete-patterns"
                              ] : List Text
                          }
                    , default-extensions =
                        [ types.Extension.LambdaCase True
                        , types.Extension.RecordWildCards True
                        , types.Extension.ScopedTypeVariables True
                        , types.Extension.ImplicitPrelude False
                        , types.Extension.OverloadedStrings True
                        ]
                    , default-language =
                        Some
                        < Haskell2010 =
                            {=}
                        | UnknownLanguage :
                            { _1 : Text }
                        | Haskell98 :
                            {}
                        >
                    , hs-source-dirs =
                        [ "app" ]
                    }
            , name =
                "dhrun"
            }
          ]
      , extra-source-files =
          [ "ChangeLog.md" ]
      , license =
          types.License.MIT {=}
      , license-files =
          [ "LICENSE" ]
      , maintainer =
          "fre@freux.fr"
      , source-repos =
          [   prelude.defaults.SourceRepo
            ⫽ { type =
                  Some (types.RepoType.Git {=})
              , location =
                  Some "https://xgitlab.mcs.anl.gov/vreis/dhrun"
              }
          ]
      , sub-libraries =
          [ { library =
                  λ(config : types.Config)
                →   prelude.defaults.Library
                  ⫽ { build-depends =
                        [ { bounds = prelude.anyVersion, package = "base" }
                        , { bounds =
                              prelude.anyVersion
                          , package =
                              "ansi-terminal"
                          }
                        , { bounds = prelude.anyVersion, package = "protolude" }
                        , { bounds = prelude.anyVersion, package = "mtl" }
                        , { bounds =
                              prelude.anyVersion
                          , package =
                              "bytestring"
                          }
                        , { bounds = prelude.anyVersion, package = "process" }
                        , { bounds = prelude.anyVersion, package = "conduit" }
                        , { bounds =
                              prelude.anyVersion
                          , package =
                              "unliftio-core"
                          }
                        , { bounds =
                              prelude.anyVersion
                          , package =
                              "containers"
                          }
                        , { bounds =
                              prelude.anyVersion
                          , package =
                              "conduit-extra"
                          }
                        , { bounds = prelude.anyVersion, package = "unix" }
                        , { bounds = prelude.anyVersion, package = "yaml" }
                        , { bounds = prelude.anyVersion, package = "aeson" }
                        , { bounds = prelude.anyVersion, package = "text" }
                        , { bounds = prelude.anyVersion, package = "directory" }
                        , { bounds = prelude.anyVersion, package = "dhall" }
                        ]
                    , compiler-options =
                          prelude.defaults.CompilerOptions
                        ⫽ { GHC =
                              [ "-Wall"
                              , "-Wcompat"
                              , "-Wincomplete-uni-patterns"
                              , "-Wincomplete-record-updates"
                              , "-Wmissing-home-modules"
                              , "-Widentities"
                              , "-Wredundant-constraints"
                              , "-Wcpp-undef"
                              , "-fwarn-tabs"
                              , "-fwarn-unused-imports"
                              , "-fwarn-missing-signatures"
                              , "-fwarn-name-shadowing"
                              , "-fprint-potential-instances"
                              , "-Wmissing-export-lists"
                              , "-fwarn-unused-do-bind"
                              , "-fwarn-wrong-do-bind"
                              , "-fwarn-incomplete-patterns"
                              ] : List Text
                          }
                    , default-extensions =
                        [ types.Extension.LambdaCase True
                        , types.Extension.RecordWildCards True
                        , types.Extension.ScopedTypeVariables True
                        , types.Extension.ImplicitPrelude False
                        , types.Extension.OverloadedStrings True
                        ]
                    , default-language =
                        Some
                        < Haskell2010 =
                            {=}
                        | UnknownLanguage :
                            { _1 : Text }
                        | Haskell98 :
                            {}
                        >
                    , hs-source-dirs =
                        [ "src" ]
                    , exposed-modules =
                        [ "Dhrun.Types.Cfg"
                        , "Dhrun.Types.Dhall"
                        , "Dhrun.Types.Yaml"
                        , "Dhrun.Run"
                        , "Dhrun.Pure"
                        , "Dhrun.Conduit"
                        ]
                    }
            , name =
                "dhrun-lib"
            }
          ]
      , synopsis =
          "dhall async CI executor"
      , test-suites =
          [ { name =
                "Tests"
            , test-suite =
                  λ(config : types.Config)
                →   prelude.defaults.TestSuite
                  ⫽ { type =
                        < exitcode-stdio =
                            { main-is = "Tests.hs" }
                        | detailed :
                            { module : Text }
                        >
                    , build-depends =
                        [ { bounds = prelude.anyVersion, package = "base" }
                        , { bounds = prelude.anyVersion, package = "protolude" }
                        , { bounds = prelude.anyVersion, package = "dhall" }
                        , { bounds = prelude.anyVersion, package = "yaml" }
                        , { bounds = prelude.anyVersion, package = "aeson" }
                        , { bounds = prelude.anyVersion, package = "filepath" }
                        , { bounds = prelude.anyVersion, package = "mtl" }
                        , { bounds =
                              prelude.anyVersion
                          , package =
                              "bytestring"
                          }
                        , { bounds = prelude.anyVersion, package = "text" }
                        , { bounds = prelude.anyVersion, package = "unliftio" }
                        , { bounds = prelude.anyVersion, package = "tasty" }
                        , { bounds =
                              prelude.anyVersion
                          , package =
                              "tasty-hunit"
                          }
                        , { bounds =
                              prelude.anyVersion
                          , package =
                              "tasty-golden"
                          }
                        , { bounds =
                              prelude.anyVersion
                          , package =
                              "tasty-hspec"
                          }
                        , { bounds =
                              prelude.anyVersion
                          , package =
                              "tasty-quickcheck"
                          }
                        , { bounds =
                              prelude.anyVersion
                          , package =
                              "generic-random"
                          }
                        , { bounds =
                              prelude.anyVersion
                          , package =
                              "quickcheck-text"
                          }
                        , { bounds = prelude.anyVersion, package = "hspec" }
                        , { bounds = prelude.anyVersion, package = "dhrun-lib" }
                        , { bounds = prelude.anyVersion, package = "Glob" }
                        ]
                    , compiler-options =
                          prelude.defaults.CompilerOptions
                        ⫽ { GHC =
                              [ "-threaded"
                              , "-Wall"
                              , "-Wcompat"
                              , "-Wincomplete-uni-patterns"
                              , "-Wincomplete-record-updates"
                              , "-Wmissing-home-modules"
                              , "-Widentities"
                              , "-Wredundant-constraints"
                              , "-Wcpp-undef"
                              , "-fwarn-tabs"
                              , "-fwarn-unused-imports"
                              , "-fwarn-unused-do-bind"
                              , "-fwarn-wrong-do-bind"
                              , "-fwarn-missing-signatures"
                              , "-fwarn-name-shadowing"
                              , "-fprint-potential-instances"
                              , "-fwarn-incomplete-patterns"
                              ] : List Text
                          }
                    , default-extensions =
                        [ types.Extension.LambdaCase True
                        , types.Extension.RecordWildCards True
                        , types.Extension.ScopedTypeVariables True
                        , types.Extension.ImplicitPrelude False
                        , types.Extension.OverloadedStrings True
                        ]
                    , default-language =
                        Some
                        < Haskell2010 =
                            {=}
                        | UnknownLanguage :
                            { _1 : Text }
                        | Haskell98 :
                            {}
                        >
                    , hs-source-dirs =
                        [ "tests" ]
                    }
            }
          ]
      }
