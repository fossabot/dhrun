let prelude =
      https://raw.githubusercontent.com/dhall-lang/dhall-to-cabal/1.3.2.0/dhall/prelude.dhall

let types =
      https://raw.githubusercontent.com/dhall-lang/dhall-to-cabal/1.3.2.0/dhall/types.dhall

let defexts =
      [ types.Extension.LambdaCase True
      , types.Extension.RecordWildCards True
      , types.Extension.ScopedTypeVariables True
      , types.Extension.ImplicitPrelude False
      , types.Extension.OverloadedStrings True
      ]

let deflang =
      Some
      < Haskell2010 = {=} | UnknownLanguage : { _1 : Text } | Haskell98 : {} >

let defcopts =
        prelude.defaults.CompilerOptions
      ⫽ { GHC =
            [ "-threaded"
            , "-Wall"
            , "-Wcompat"
            , "-Wincomplete-uni-patterns"
            , "-Wincomplete-record-updates"
            , "-Wmissing-home-modules"
            , "-Widentities"
            , "-Wredundant-constraints"
            , "-Wcpp-undef"
            , "-fwarn-tabs"
            , "-fwarn-unused-imports"
            , "-fwarn-missing-signatures"
            , "-fwarn-name-shadowing"
            , "-fprint-potential-instances"
            , "-Wmissing-export-lists"
            , "-fwarn-unused-do-bind"
            , "-fwarn-wrong-do-bind"
            , "-fwarn-incomplete-patterns"
            ] : List Text
        }

let copts =
      { compiler-options =
          defcopts
      , default-extensions =
          defexts
      , default-language =
          deflang
      }

let map = https://prelude.dhall-lang.org/List/map

let nobound = λ(p : Text) → { bounds = prelude.anyVersion, package = p }

let nobounds =
        λ(ps : List Text)
      → map Text { bounds : types.VersionRange, package : Text } nobound ps

in    prelude.defaults.Package
    ⫽ { name =
          "dhrun"
      , version =
          prelude.v "1.0.0"
      , author =
          "Valentin Reis"
      , build-type =
          Some (types.BuildType.Simple {=})
      , cabal-version =
          prelude.v "2.0"
      , category =
          "tools"
      , description =
          "reads process information from a dhall configuration and executes asynchronous processes."
      , executables =
          [ { executable =
                  λ(config : types.Config)
                →   prelude.defaults.Executable
                  ⫽ { main-is =
                        "Main.hs"
                    , hs-source-dirs =
                        [ "app" ]
                    , build-depends =
                        nobounds
                        [ "base"
                        , "protolude"
                        , "directory"
                        , "bytestring"
                        , "editor-open"
                        , "dhrun-lib"
                        , "filepath"
                        , "optparse-applicative"
                        , "dhall"
                        ]
                    }
                  ⫽ copts
            , name =
                "dhrun"
            }
          ]
      , extra-source-files =
          [ "ChangeLog.md" ]
      , license =
          types.License.MIT {=}
      , license-files =
          [ "LICENSE" ]
      , maintainer =
          "fre@freux.fr"
      , source-repos =
          [   prelude.defaults.SourceRepo
            ⫽ { type =
                  Some (types.RepoType.Git {=})
              , location =
                  Some "https://xgitlab.mcs.anl.gov/vreis/dhrun"
              }
          ]
      , sub-libraries =
          [ { library =
                  λ(config : types.Config)
                →   prelude.defaults.Library
                  ⫽ { build-depends =
                        nobounds
                        [ "base"
                        , "ansi-terminal"
                        , "protolude"
                        , "mtl"
                        , "bytestring"
                        , "process"
                        , "conduit"
                        , "unliftio-core"
                        , "containers"
                        , "conduit-extra"
                        , "unix"
                        , "yaml"
                        , "aeson"
                        , "text"
                        , "directory"
                        , "dhall"
                        ]
                    , hs-source-dirs =
                        [ "src" ]
                    , exposed-modules =
                        [ "Dhrun.Types.Cfg"
                        , "Dhrun.Types.Dhall"
                        , "Dhrun.Types.Yaml"
                        , "Dhrun.Run"
                        , "Dhrun.Pure"
                        , "Dhrun.Conduit"
                        ]
                    }
                  ⫽ copts
            , name =
                "dhrun-lib"
            }
          ]
      , synopsis =
          "dhall async CI executor"
      , test-suites =
          [ { name =
                "Tests"
            , test-suite =
                  λ(config : types.Config)
                →   prelude.defaults.TestSuite
                  ⫽ { type =
                        < exitcode-stdio =
                            { main-is = "Tests.hs" }
                        | detailed :
                            { module : Text }
                        >
                    , build-depends =
                        nobounds
                        [ "base"
                        , "protolude"
                        , "dhall"
                        , "yaml"
                        , "aeson"
                        , "filepath"
                        , "mtl"
                        , "bytestring"
                        , "text"
                        , "unliftio"
                        , "tasty"
                        , "tasty-hunit"
                        , "tasty-golden"
                        , "tasty-hspec"
                        , "tasty-quickcheck"
                        , "generic-random"
                        , "quickcheck-text"
                        , "hspec"
                        , "dhrun-lib"
                        , "Glob"
                        ]
                    , hs-source-dirs =
                        [ "tests" ]
                    }
                  ⫽ copts
            }
          ]
      }
